datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String   @default(uuid()) @id
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  username                String   @unique
  avatarUrl               String
  email                   String
  githubId                String   @unique
  githubAccessToken       String
  digitaloceanAccessToken String?
  servers                 Server[]
  sshKeys                 SshKey[]
}

model SshKey {
  id             String   @default(uuid()) @id
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  privateKey     String
  digitaloceanId Int
  servers        Server[]
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model Server {
  id          String      @default(uuid()) @id
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  serverId    Int
  ip          String?
  name        String
  type        ServerTypes
  status      ServerStatus
  actionId    Int?
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  sshKey      SshKey      @relation(fields: [sshKeyId], references: [id])
  sshKeyId    String
}

enum ServerTypes {
  AWS
  DIGITALOCEAN
  LINODE
}

enum ServerStatus {
  NEW
  ACTIVE
  OFF
  ARCHIVE
}

model Action {
  id             String   @default(uuid()) @id
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  status         ActionStatus
  type           ActionType
  server         Server   @relation(fields: [serverId], references: [id])
  serverId       String
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERRORED
}

enum ActionType {
  SETUP_SERVER
}

// Link database to app
model App {
  id            String   @default(uuid()) @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  name          String
  githubRepoUrl String
  githubId      String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  server        Server   @relation(fields: [serverId], references: [id])
  serverId      String
}

model Database {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  type      DbTypes
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
}

enum DbTypes {
  REDIS
  POSTGRESQL
  MONGODB
  MYSQL
}